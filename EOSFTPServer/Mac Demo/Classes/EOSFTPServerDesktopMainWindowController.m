/*******************************************************************************
 * Copyright (c) 2012, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @file            ...
 * @author          Jean-David Gadina - www.xs-labs.com
 * @copyright       (c) 2012, XS-Labs
 * @abstract        ...
 */

#import "EOSFTPServerDesktopMainWindowController.h"
#import "EOSFTPServerDesktopMainWindowController+NSTableViewDataSource.h"
#import "EOSFTPServerDesktopMainWindowController+NSTableViewDelegate.h"
#import "EOSFTPServer.h"
#import "EOSFTPServerUser.h"

@interface NSScrollView( DDNAToolKit )

- ( void )scrollToBottom;

@end

@interface NSTableView( DDNAToolKit )

- ( void )scrollToBottom;

@end

@implementation NSScrollView( DDNAToolKit )

- ( void )scrollToBottom
{
    NSPoint newScrollOrigin;
    NSRect  contentRect;
    NSRect  documentRect;
    float   scrollXPos;
    CGFloat xPos;
    
    contentRect  = [ ( NSView * )[ self contentView ] bounds ];
    documentRect = [ ( NSView * )[ self documentView ] bounds ];
    scrollXPos   = [ [ self horizontalScroller ] floatValue  ];
    xPos         = ( documentRect.size.width - contentRect.size.width ) * scrollXPos;
    
    if( [ [ self documentView ] isFlipped ] )
    {
        newScrollOrigin = NSMakePoint( xPos, NSMaxY( documentRect ) - NSHeight( contentRect  ) );
    }
    else
    {
        newScrollOrigin = NSMakePoint( xPos, ( float )0.0 );
    }
    
    [ [ self documentView ] scrollPoint: newScrollOrigin ];
}

@end

@implementation NSTableView( DDNAToolKit )

- ( void )scrollToBottom
{
    NSView * view;
    
    view = self.superview;
    
    while( 1 )
    {
        if( view == nil )
        {
            break;
        }
        
        if( [ view isKindOfClass: [ NSScrollView class ] ] )
        {
            [ ( NSScrollView * )view scrollToBottom ];
            break;
        }
        
        view = view.superview;
    }
}

@end

@implementation EOSFTPServerDesktopMainWindowController

@synthesize tableView       = _tableView;
@synthesize startButton     = _startButton;
@synthesize stopButton      = _stopButton;
@synthesize allowAnonymous  = _allowAnonymous;
@synthesize serverPort      = _serverPort;
@synthesize addUserWindow   = _addUserWindow;

- ( id )init
{
    if( ( self = [ self initWithWindowNibName: @"MainWindow" owner: self ] ) )
    {
        _server               = [ [ EOSFTPServer alloc ] initWithPort: 2121 ];
        _server.chroot        = YES;
        _server.rootDirectory = NSHomeDirectory();
    }
    
    return self;
}

- ( void )dealloc
{
    [ _tableView        release ];
    [ _startButton      release ];
    [ _stopButton       release ];
    [ _allowAnonymous   release ];
    [ _serverPort       release ];
    [ _server           release ];
    [ _users            release ];
    [ _addUserWindow    release ];
    
    [ super dealloc ];
}

- ( void )windowDidLoad
{
    NSDictionary     * userInfos;
    EOSFTPServerUser * user;
    
    [ super windowDidLoad ];
    
    _users = [ [ [ NSUserDefaults standardUserDefaults ] objectForKey: @"Users" ] mutableCopy ];
    
    for( userInfos in _users )
    {
        user = [ EOSFTPServerUser userWithName: [ userInfos objectForKey: @"Name" ] md5Password: [ userInfos objectForKey: @"Password" ] ];
        
        [ _server addUser: user ];
    }
    
    [ _serverPort     setStringValue:  [ NSString stringWithFormat: NSLocalizedString( @"ServerPort", nil ), _server.port ] ];
    [ _allowAnonymous setIntegerValue: [ [ NSUserDefaults standardUserDefaults ] boolForKey: @"AllowAnonymous" ] ];
    
    [ _server setAllowAnonymousUsers: [ [ NSUserDefaults standardUserDefaults ] boolForKey: @"AllowAnonymous" ] ];
    
    _tableView.dataSource = self;
    _tableView.delegate   = self;
    
    if( _server.running == YES )
    {
        [ _startButton setEnabled: NO ];
        [ _stopButton  setEnabled: YES ];
    }
    else
    {
        [ _startButton setEnabled: YES ];
        [ _stopButton  setEnabled: NO ];
    }
    
    [ _tableView performSelector: @selector( scrollToBottom ) withObject: nil afterDelay: 1 ];
}

- ( IBAction )addUser: ( id )sender
{
    ( void )sender;
}

- ( IBAction )deleteUser: ( id )sender
{
    ( void )sender;
}

- ( IBAction )start: ( id )sender
{
    ( void )sender;
    
    if( [ _server start ] == YES )
    {
        [ _startButton setEnabled: NO ];
        [ _stopButton  setEnabled: YES ];
    }
}

- ( IBAction )stop: ( id )sender
{
    ( void )sender;
    
    if( [ _server stop ] == YES )
    {
        [ _startButton setEnabled: YES ];
        [ _stopButton  setEnabled: NO ];
    }
}

- ( IBAction )allowAnonymous: ( id )sender
{
    NSAlert * alert;
    
    ( void )sender;
    
    [ [ NSUserDefaults standardUserDefaults ] setBool: ( BOOL )[ _allowAnonymous integerValue ] forKey: @"AllowAnonymous" ];
    [ [ NSUserDefaults standardUserDefaults ] synchronize ];
    
    if( _server.running == YES )
    {
        alert = [ NSAlert
                    alertWithMessageText:       NSLocalizedString( @"FTPRestartAlertTitle", nil )
                    defaultButton:              NSLocalizedString( @"Restart", nil )
                    alternateButton:            NSLocalizedString( @"DontRestart", nil )
                    otherButton:                nil
                    informativeTextWithFormat:  NSLocalizedString( @"FTPRestartAlertMessage", nil )
                ];
        
        if( [ alert runModal ] == NSAlertDefaultReturn )
        {
            [ _server setAllowAnonymousUsers: ( BOOL )[ _allowAnonymous integerValue ] ];
            [ _server restart ];
        }
    }
}

@end
